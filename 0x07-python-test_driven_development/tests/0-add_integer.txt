How to use ``0-add_integer`` module
===================================

This module define an integer addition function ``add_integer(a, b=98)``

Usage:
======

``add_integer`` returns the addition of its two arguments.

::

  >>> add_integer = __import__('0-add_integer').add_integer
  >>> add_integer(10, 20)
  30

::

  >>> add_integer(10, -20)
  -10

It also works with float numbers

::

  >>> add_integer(10.0, 20.0)
  30

It also works with floating and integer values

::

  >>> add_integer(10.0, 20)
  30

And also the second argument is optionalby defualt with the value 98

::

  >>> add_integer(2)
  100

Exception raised
================

If first argument is ``str``

::

  >>> add_integer("alx", 20)
  Traceback (most recent call last):
  TypeError: a must be an integer

if second argument is also a ``str``

::

  >>> add_integer(10, "alx")
  Traceback (most recent call last):
  TypeError: b must be an integer

If the first argument is ``None``

::

  >>> add_integer(None)
  Traceback (most recent call last):
  TypeError: a must be an integer

If the second argument is ``None``

::

  >>> add_integer(10, None)
  Traceback (most recent call last):
  TypeError: b must be an integer

If both arguments is not an integer or a float,
it raises an exception for first argument only

::

  >>> add_integer("alx", "SWE")
  Traceback (most recent call last):
  TypeError: a must be an integer

If any of the arguments is infinity, the function will fail

::

  >>> add_integer(float('inf'))
  Traceback (most recent call last):
  OverflowError: cannot convert float infinity to integer

::

  >>> add_integer(10, float('inf'))
  Traceback (most recent call last):
  OverflowError: cannot convert float infinity to integer

Will raise an exception if argument float('nan')

::

  >>> add_integer(float('nan'))
  Traceback (most recent call last):
  ValueError: cannot convert float NaN to integer

::

  >>> add_integer(10, float('nan'))
  Traceback (most recent call last):
  ValueError: cannot convert float NaN to integer
